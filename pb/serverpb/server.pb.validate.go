// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/server.proto

package serverpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendRequestMultiError, or
// nil if none found.
func (m *SendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Transaction

	// no validation rules for Mode

	if len(errors) > 0 {
		return SendRequestMultiError(errors)
	}

	return nil
}

// SendRequestMultiError is an error wrapping multiple validation errors
// returned by SendRequest.ValidateAll() if the designated constraints aren't met.
type SendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRequestMultiError) AllErrors() []error { return m }

// SendRequestValidationError is the validation error returned by
// SendRequest.Validate if the designated constraints aren't met.
type SendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRequestValidationError) ErrorName() string { return "SendRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRequestValidationError{}

// Validate checks the field values on SendResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendResponseMultiError, or
// nil if none found.
func (m *SendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signature

	if len(errors) > 0 {
		return SendResponseMultiError(errors)
	}

	return nil
}

// SendResponseMultiError is an error wrapping multiple validation errors
// returned by SendResponse.ValidateAll() if the designated constraints aren't met.
type SendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendResponseMultiError) AllErrors() []error { return m }

// SendResponseValidationError is the validation error returned by
// SendResponse.Validate if the designated constraints aren't met.
type SendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendResponseValidationError) ErrorName() string { return "SendResponseValidationError" }

// Error satisfies the builtin error interface
func (e SendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendResponseValidationError{}

// Validate checks the field values on HealthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthRequestMultiError, or
// nil if none found.
func (m *HealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthRequestMultiError(errors)
	}

	return nil
}

// HealthRequestMultiError is an error wrapping multiple validation errors
// returned by HealthRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthRequestMultiError) AllErrors() []error { return m }

// HealthRequestValidationError is the validation error returned by
// HealthRequest.Validate if the designated constraints aren't met.
type HealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthRequestValidationError) ErrorName() string { return "HealthRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthRequestValidationError{}

// Validate checks the field values on HealthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthResponseMultiError,
// or nil if none found.
func (m *HealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return HealthResponseMultiError(errors)
	}

	return nil
}

// HealthResponseMultiError is an error wrapping multiple validation errors
// returned by HealthResponse.ValidateAll() if the designated constraints
// aren't met.
type HealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthResponseMultiError) AllErrors() []error { return m }

// HealthResponseValidationError is the validation error returned by
// HealthResponse.Validate if the designated constraints aren't met.
type HealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthResponseValidationError) ErrorName() string { return "HealthResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthResponseValidationError{}
